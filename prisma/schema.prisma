// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STAFF
  ADMIN
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime @map("expires_at")

  @@map("sessions")
}

model User {
  id             String   @id @default(uuid()) @db.Uuid
  email          String   @unique
  firstName      String?  @map("first_name")
  lastName       String?  @map("last_name")
  password       String
  active         Boolean
  role           UserRole @default(STAFF)
  createdLeagues League[] @relation("createdUser")
  updatedLeagues League[] @relation("updatedUser")
  createdSeasons Season[] @relation("createdUser")
  updatedSeasons Season[] @relation("updatedUser")

  @@map("users")
}

model Sport {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  leagues League[]

  @@map("sports")
}

model League {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  logo          String   @default("")
  sportId       Int      @map("sport_id")
  sport         Sport?   @relation(fields: [sportId], references: [id])
  createdDate   DateTime @default(now()) @map("created_date")
  createdUserId String?  @map("created_user_id") @db.Uuid
  createdUser   User?    @relation(fields: [createdUserId], references: [id], name: "createdUser")
  updatedDate   DateTime @updatedAt @map("updated_date")
  updatedUserId String?  @map("updated_user_id") @db.Uuid
  updatedUser   User?    @relation(fields: [updatedUserId], references: [id], name: "updatedUser")
  seasons       Season[]

  @@map("leagues")
}

model Season {
  id            Int      @id @default(autoincrement())
  name          String
  startDate     DateTime @default(now()) @map("start_date")
  endDate       DateTime @default(now()) @map("end_date")
  leagueId      Int      @map("league_id")
  league        League?  @relation(fields: [leagueId], references: [id])
  createdDate   DateTime @default(now()) @map("created_date")
  createdUserId String?  @map("created_user_id") @db.Uuid
  createdUser   User?    @relation(fields: [createdUserId], references: [id], name: "createdUser")
  updatedDate   DateTime @updatedAt @map("updated_date")
  updatedUserId String?  @map("updated_user_id") @db.Uuid
  updatedUser   User?    @relation(fields: [updatedUserId], references: [id], name: "updatedUser")
  teams         Team[]
  matches       Match[]

  @@map("seasons")
}

model Team {
  id               Int                @id @default(autoincrement())
  name             String
  logo             String?
  seasonId         Int                @map("season_id")
  season           Season?            @relation(fields: [seasonId], references: [id])
  players          Player[]
  matches          Match[]
  homeTeamMatches  Match[]            @relation("homeTeam")
  awayTeamMatches  Match[]            @relation("awayTeam")
  playersOnMatches PlayersOnMatches[]
  aflResults       AFLResult[]

  @@map("teams")
}

model Player {
  id           Int                @id @default(autoincrement())
  teamId       Int                @map("team_id")
  team         Team?              @relation(fields: [teamId], references: [id])
  name         String
  playerNumber Int                @map("player_number")
  matches      PlayersOnMatches[]

  @@map("players")
}

model Match {
  id          Int                @id @default(autoincrement())
  seasonId    Int                @map("season_id")
  season      Season?            @relation(fields: [seasonId], references: [id])
  homeTeamId  Int                @map("home_team_id")
  homeTeam    Team?              @relation(fields: [homeTeamId], references: [id], name: "homeTeam")
  homeTeamCsv String?            @map("home_team_csv")
  awayTeamId  Int                @map("away_team_id")
  awayTeam    Team?              @relation(fields: [awayTeamId], references: [id], name: "awayTeam")
  awayTeamCsv String?            @map("away_team_csv")
  round       Int
  date        DateTime
  teamId      Int?               @map("team_id")
  team        Team?              @relation(fields: [teamId], references: [id])
  locationId  Int                @map("location_id")
  location    Location?          @relation(fields: [locationId], references: [id])
  players     PlayersOnMatches[]
  aflResults  AFLResult[]

  @@map("matches")
}

model PlayersOnMatches {
  id       Int     @id @default(autoincrement())
  matchId  Int     @map("match_id")
  match    Match?  @relation(fields: [matchId], references: [id])
  playerId Int     @map("player_id")
  player   Player? @relation(fields: [playerId], references: [id])
  teamId   Int     @map("team_id")
  team     Team?   @relation(fields: [teamId], references: [id])

  @@index([matchId, playerId, teamId])
  @@map("players_on_matches")
}

model Location {
  id      Int     @id @default(autoincrement())
  name    String
  matches Match[]

  @@map("locations")
}

model AFLResult {
  id             Int     @id @default(autoincrement())
  matchId        Int     @map("match_id")
  match          Match?  @relation(fields: [matchId], references: [id])
  teamId         Int     @map("team_id")
  team           Team?   @relation(fields: [teamId], references: [id])
  scorePrimary   Int     @default(0) @map("score_primary")
  scoreSecondary String? @map("score_secondary")

  @@map("afl_results")
}
